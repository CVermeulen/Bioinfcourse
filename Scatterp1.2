<!DOCTYPE html>
<html>
<meta charset="utf-8">
<style>

body {
  font: 12px sans-serif;
}

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.ninja {
	fill: none;
}

.hidden {
	fill:none;
}

.hiddenx {
	fill:none;
}

.dot {
 stroke: none;
}

.hoog {
  fill: red;
}

.laag {
  fill: red;
}

.all{
	fill:red;
}

.hiddena {
	fill:none;
}

.hiddenb {
	fill:none;
}

.tool{
  color: blue;
}

</style>
<body>
<script src="http://d3js.org/d3.v3.min.js"></script>
<script type="text/javascript" src="http://code.jquery.com/jquery-1.7.1.min.js"></script>

<script>

var xdata = [];
var ydata = []; 
var labels = [];

function fetch_data() {
  return $.ajax({
   url: 'http://student:hello@umcu-bioinf.is-not-certified.com/test/_design/all/_view/all',
   type: 'GET',
   dataType: 'jsonp',
   cache: false,
   crossDomain: true,
   }).done( function(data) {

     // console.log("First normal ",data.rows[0].value.normal);
     // console.log("First tumor  ",data.rows[0].value.tumor)
     for (i in data.rows) {
       // console.log(i,"normal: ",data.rows[i].value.normal);
       xdata.push(data.rows[i].value.tumor);
       ydata.push(data.rows[i].value.normal);
       labels.push(data.rows[i]._id); 
     } 
   
})};


// Global initialisations

var margin = {top: 20, right: 20, bottom: 30, left: 40},
    width = 960 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

var x = d3.scale.linear()
    .range([0, 250]);

var y = d3.scale.linear()
    .range([800, 0]);

var color = d3.scale.category10();

// the chart object, includes all margins
var chart = d3.select('body')
  .append('svg:svg')
  .attr('width', width + margin.right + margin.left)
  .attr('height', height + margin.top + margin.bottom)
  .attr('class', 'chart')

// the main object where the chart and axis will be drawn
var main = chart.append('g')
  .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')
  .attr('width', width)
  .attr('height', height)
  .attr('class', 'main') ;

var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom");

var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left");

var svg = d3.select("body").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

xdata.length = 0;
ydata.length = 0;
var xwaarde = 3;
var ywaarde = 3;


var rescale = function() {
  
  x = d3.scale.linear()
            .domain([0, d3.max(xdata)/xwaarde])  // the range of the values to plot EDIT HERE
            .range([ 0, width ]);        // the pixel range of the x-axis


  y = d3.scale.linear()
            .domain([0, d3.max(ydata)/ywaarde])
            .range([ height, 0 ]);

  // redraw the x axis
  var xAxis = d3.svg.axis()
    .scale(x)
    .orient('bottom');

  main.append('g')
  .attr('transform', 'translate(0,' + height + ')')
  .attr('class', 'main axis date')
  .style({ 'stroke': 'Black', 'fill': 'none', 'stroke-width': '1px'})
  .call(xAxis);

  // redraw the y axis
  var yAxis = d3.svg.axis()
  .scale(y)
  .orient('left');

  main.append('g')
    .attr('transform', 'translate(0,0)')
    .attr('class', 'main axis date')
    .style({ 'stroke': 'Black', 'fill': 'none', 'stroke-width': '1px'})
    .call(yAxis);
}



 


var refresh = function() {


 //Create Title 
  main.append("text")
    .attr("x", width / 2 )
    .attr("y", -10)
    .style("text-anchor", "middle")
    .text("Tumor Normal scatter plot");

var maximumX = d3.max(xdata)/xwaarde; 
var maximumY = d3.max(ydata)/ywaarde;


//draw all on max X
var dots = g.selectAll("scatter-dots")
    .data(ydata)  // using the values in the ydata array
    .enter().append("svg:circle")  // create a new circle for each value
     .classed ("laag", function(d,i) { return (xdata[i] > maximumX) })
     .classed("ninja", function(d,i) { return (xdata[i] < maximumX) })
	
        .attr("cy", function (d) { return y(d); } ) // translate y value to a pixel
        .attr("cx", function (d,i) { return 900; } ) // translate x value
        .attr("r", 3) // radius of circle
	
        .attr("fill", function(d,i) { return color.range()[4]; }) 
        .append("svg:title")
        .style("opacity", 0.0); // opacity of circle}
 

//draw all high Y on max Y
var dots = g.selectAll("scatter-dots")
    .data(ydata)  // using the values in the ydata array
    .enter().append("svg:circle")  // create a new circle for each value
	.classed("hoog", function(d,i) { return (ydata[i] > maximumY) })
	.classed("ninja", function(d,i) { return (ydata[i] < maximumY) })
	.attr("cy", function (d) { return 0; } ) // translate y value to a pixel
        .attr("cx", function (d,i) { return x(xdata[i]); } ) // translate x value
        .attr("r", 3) // radius of circle
	
        .attr("fill", function(d,i) { return color.range()[10]; }) 
        .append("svg:title")
        .style("opacity", 0.0); // opacity of circle}


 
//draw all
  var dots = g.selectAll("scatter-dots")
    .data(ydata)  // using the values in the ydata array
    .enter().append("svg:circle")  // create a new circle for each value
	.classed("hidden", function(d,i) { return (ydata[i] > maximumY) })
	.classed("hiddenx", function(d,i) { return (xdata[i] > maximumX) })
        .attr("cy", function (d) { return y(d); } ) // translate y value to a pixel
        .attr("cx", function (d,i) { return x(xdata[i]); } ) // translate x value
        .attr("r", 4) // radius of circle
	
        .attr("fill", function(d,i) { return color.range()[2]; }) 
        .append("svg:title")
        .style("opacity", 0.6); // opacity of circle}
   

  var dots = g.selectAll("scatter-dots")
    .data(ydata)  // using the values in the ydata array
    .enter().append("svg:circle")  // create a new circle for each value
	.classed("hiddena", function(d,i) { return (ydata[i] < maximumY) })
	.classed("hiddenb", function(d,i) { return (xdata[i] < maximumX) })
	.attr("cy", function (d) { return 0; } ) // translate y value to a pixel
        .attr("cx", function (d,i) { return 900; } ) // translate x value
        .attr("r", 3) // radius of circle
	
        .attr("fill", function(d,i) { return color.range()[3]; }) 
        .append("svg:title")
        .style("opacity", 0.6); // opacity of circle}
}      

var g = main.append("svg:g"); 

$.when( fetch_data() )
  .then( function() { 
    console.log('Total hits: ',xdata.length) ; 
    rescale();
    refresh()
  } );

</script>
</body>
</html>